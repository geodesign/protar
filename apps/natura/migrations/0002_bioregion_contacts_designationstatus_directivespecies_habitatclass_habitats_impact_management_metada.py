# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-01-19 17:33
from __future__ import unicode_literals

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('natura', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bioregion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biogefraphicreg', models.CharField(blank=True, help_text='Indicate in wich beogreograhic region the site is falling.', max_length=510, null=True)),
                ('percentage', models.FloatField(blank=True, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=510, null=True)),
                ('address_unstructured', models.TextField(blank=True, null=True)),
                ('adminunit', models.CharField(blank=True, max_length=510, null=True)),
                ('thoroughfare', models.CharField(blank=True, max_length=510, null=True)),
                ('designator', models.CharField(blank=True, max_length=510, null=True)),
                ('postcode', models.CharField(blank=True, max_length=510, null=True)),
                ('postname', models.CharField(blank=True, max_length=510, null=True)),
                ('address', models.CharField(blank=True, max_length=510, null=True)),
                ('locatorname', models.CharField(blank=True, max_length=510, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Designationstatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designationcode', models.CharField(blank=True, max_length=10, null=True)),
                ('designatedsitename', models.CharField(blank=True, max_length=510, null=True)),
                ('overlapcode', models.CharField(blank=True, max_length=2, null=True)),
                ('overlapperc', models.FloatField(blank=True, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
            options={
                'verbose_name_plural': 'designationstati',
            },
        ),
        migrations.CreateModel(
            name='Directivespecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directive', models.CharField(blank=True, max_length=36, null=True)),
                ('speciesname', models.CharField(blank=True, max_length=122, null=True)),
                ('annexii', models.CharField(blank=True, choices=[('y', 'Yes'), ('N', 'No')], max_length=2, null=True)),
                ('annexii1', models.CharField(blank=True, choices=[('y', 'Yes'), ('N', 'No')], max_length=2, null=True)),
                ('annexii2', models.CharField(blank=True, choices=[('y', 'Yes'), ('N', 'No')], max_length=2, null=True)),
                ('annexiii1', models.CharField(blank=True, choices=[('y', 'Yes'), ('N', 'No')], max_length=2, null=True)),
                ('annexiii2', models.CharField(blank=True, choices=[('y', 'Yes'), ('N', 'No')], max_length=2, null=True)),
                ('annexiv', models.CharField(blank=True, max_length=2, null=True)),
                ('annexv', models.CharField(blank=True, max_length=2, null=True)),
                ('spbcax1', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'verbose_name_plural': 'directivespecies',
            },
        ),
        migrations.CreateModel(
            name='Habitatclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habitatcode', models.CharField(blank=True, max_length=510, null=True)),
                ('percentagecover', models.FloatField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=510, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Habitats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habitatcode', models.CharField(blank=True, help_text='Code for the habitat type listed in AnnexI of Directive 92/43/EEC', max_length=8, null=True)),
                ('description', models.CharField(blank=True, help_text='Name of the habitat type listed in AnnexI of Directive 92/43/EEC', max_length=510, null=True)),
                ('habitat_priority', models.CharField(blank=True, max_length=2, null=True)),
                ('priority_form_habitat_type', models.IntegerField(blank=True, null=True)),
                ('non_presence_in_site', models.IntegerField(blank=True, null=True)),
                ('cover_ha', models.FloatField(blank=True, null=True)),
                ('caves', models.CharField(blank=True, max_length=10, null=True)),
                ('representativity', models.CharField(blank=True, max_length=2, null=True)),
                ('relsurface', models.CharField(blank=True, max_length=2, null=True)),
                ('conservation', models.CharField(blank=True, max_length=2, null=True)),
                ('global_assesment', models.CharField(blank=True, max_length=2, null=True)),
                ('dataquality', models.CharField(blank=True, choices=[('G', 'Good (e.g. based on surveys)'), ('M', 'Moderate (e.g. based on partial data with some extrapolation)'), ('P', 'Poor (e.g. rough estimation)')], max_length=2, null=True)),
                ('percentage_cover', models.FloatField(blank=True, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
            options={
                'verbose_name_plural': 'habitats',
            },
        ),
        migrations.CreateModel(
            name='Impact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impactcode', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=510, null=True)),
                ('intensity', models.CharField(blank=True, choices=[('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], max_length=12, null=True)),
                ('pollutioncode', models.CharField(blank=True, max_length=100, null=True)),
                ('occurrence', models.CharField(blank=True, choices=[('IN', 'Inside'), ('a', 'Ouside (in the surroundings of the site)')], help_text='Inside or outside the surounding of the site. The surrounding is the area where the outside impacts and activities may effect the integreity of the site.', max_length=8, null=True)),
                ('impact_type', models.CharField(blank=True, choices=[('N', 'Nitrogen input'), ('P', 'Phosphor/Phosphate input'), ('A', 'Acidification'), ('T', 'Toxic inorganic chemicals'), ('O', 'Toxic organic chemicals'), ('X', 'Mixed pollution')], max_length=2, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Management',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.TextField(blank=True, null=True)),
                ('org_email', models.CharField(blank=True, max_length=510, null=True)),
                ('manag_conserv_measures', models.TextField(blank=True, null=True)),
                ('manag_plan', models.TextField(blank=True, null=True)),
                ('manag_plan_url', models.TextField(blank=True, null=True)),
                ('manag_status', models.CharField(blank=True, choices=[('Y', 'Management plan exists'), ('P', 'Management plan is in preparation'), ('N', 'Management plan does not exist')], max_length=2, null=True)),
                ('org_locatorname', models.CharField(blank=True, max_length=510, null=True)),
                ('org_designator', models.CharField(blank=True, max_length=510, null=True)),
                ('org_adminunit', models.CharField(blank=True, max_length=510, null=True)),
                ('org_postcode', models.CharField(blank=True, max_length=510, null=True)),
                ('org_postname', models.CharField(blank=True, max_length=510, null=True)),
                ('org_adress', models.CharField(blank=True, max_length=510, null=True)),
                ('org_address_unstructured', models.TextField(blank=True, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter', models.CharField(blank=True, max_length=256, null=True)),
                ('value', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Natura2000Sites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_compilation', models.DateTimeField(blank=True, null=True)),
                ('date_update', models.DateTimeField(blank=True, null=True)),
                ('date_spa', models.DateTimeField(blank=True, null=True)),
                ('spa_legal_reference', models.TextField(blank=True, null=True)),
                ('date_prop_sci', models.DateTimeField(blank=True, null=True)),
                ('date_conf_sci', models.DateTimeField(blank=True, null=True)),
                ('date_sac', models.DateTimeField(blank=True, null=True)),
                ('sac_legal_reference', models.TextField(blank=True, null=True)),
                ('explanations', models.TextField(blank=True, null=True)),
                ('marine_area_percentage', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('lengthkm', models.FloatField(blank=True, null=True)),
                ('areaha', models.FloatField(blank=True, null=True)),
                ('documentation', models.TextField(blank=True, null=True)),
                ('quality', models.TextField(blank=True, null=True)),
                ('designation', models.TextField(blank=True, null=True)),
                ('othercharact', models.TextField(blank=True, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speciesgroup', models.CharField(blank=True, max_length=40, null=True)),
                ('speciesname', models.CharField(blank=True, max_length=500, null=True)),
                ('speciescode', models.CharField(blank=True, max_length=8, null=True)),
                ('motivation', models.CharField(blank=True, max_length=40, null=True)),
                ('sensitive', models.IntegerField(blank=True, choices=[(0, 'Not sensitive'), (1, 'Sensitive')], help_text='States if a species is sensitive or not for its publication', null=True)),
                ('nonpresenceinsite', models.IntegerField(blank=True, null=True)),
                ('lowerbound', models.IntegerField(blank=True, null=True)),
                ('upperbound', models.IntegerField(blank=True, null=True)),
                ('counting_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('abundance_category', models.CharField(blank=True, choices=[('C', 'Common'), ('R', 'Rare'), ('V', 'Very rare'), ('P', 'Present')], max_length=2, null=True)),
                ('ref_spgroup', models.CharField(blank=True, max_length=40, null=True)),
                ('population_type', models.CharField(blank=True, max_length=2, null=True)),
                ('dataquality', models.CharField(blank=True, max_length=4, null=True)),
                ('population', models.CharField(blank=True, max_length=28, null=True)),
                ('conservation', models.CharField(blank=True, max_length=2, null=True)),
                ('isolation', models.CharField(blank=True, max_length=2, null=True)),
                ('global_assessment', models.CharField(blank=True, max_length=2, null=True)),
                ('directivespecies', models.BooleanField(default=True, help_text='Code the species listed in Article 4(1) and 4(2) of the bird directive 79/409/EEC and Annex II of Council Directive 92/43/EEC.')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='natura.Site')),
            ],
        ),
    ]
